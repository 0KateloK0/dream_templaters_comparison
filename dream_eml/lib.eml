let styles = (
  <style>
    .wrapper {
        background-color: grey;
        padding: 100px 20% 100px 20%;
    }
    #padding {
        font-size: 20px;
        color: lightblue;
    }
    body {
        margin: 0;
    }
    .repeating_values_wrapper {
        display: flex;
        justify-content: space-evenly;
    }
    .repeating_value {
        width: 100%;
        text-align: center;
        display: flex;
        justify-content: space-around;
        flex-direction: column;
        vertical-align: middle;
    }
    .repeating_values-colored {
        background-color: grey;
        height: 400px;
    }
  </style>
)

let repeating_value ~children ~is_colored = (
  %%
  <div class="<%s if is_colored then "repeating_value repeating_values-colored" else "repeating_value" %>" >
    <%s children %>
  </div>
  %%
)

let render _ = (
  <html>
  <head>
      <title>My comparison test</title>
      <%s! styles %>
  </head>
  <body>
      <div class="wrapper">
          <h1 style="font-size: 40px;color:aliceblue;">Cumtest <br> The future of testing</h1>
          <p id="padding">
              Imagine, you want to compare several templaters doing the same task.
          </p>
      </div>
      <div class="test_suites">
          <h2 style="padding: 100px 20%">We are comparing those tests</h2>
          <div class="repeating_values_wrapper">
              <%s! repeating_value ~is_colored:true ~children:"We can compare not one," %>
              <%s! repeating_value ~is_colored:false ~children:"not two," %>
              <%s! repeating_value ~is_colored:true ~children:"but three values!" %>
          </div>
      </div>
  </body>
  </html>
)

let rec _stress_render i =
  if i < 10000 then (repeating_value ~is_colored:(i mod 2 == 0) ~children:(string_of_int i)) ^ (_stress_render (i+1))
  else ""

let stress_render _ = (
  <html>
  <head>
    <title>Stress</title>
  </head>
  <body>
    <div>
      <%s! _stress_render 0 %>
    </div>
  </body>
  </html>
)


let word_request request =
  Dream.param request "word"
  |> render
  |> Dream.html

let run () =
  Dream.run
  @@ Dream.logger
  @@ Dream.router [

    Dream.get "/:word" word_request;

  ]
